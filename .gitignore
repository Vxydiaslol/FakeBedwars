--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.2.6) ~  Much Love, Ferib 

]]--

do
	local v0 = tonumber;
	local v1 = string.byte;
	local v2 = string.char;
	local v3 = string.sub;
	local v4 = string.gsub;
	local v5 = string.rep;
	local v6 = table.concat;
	local v7 = table.insert;
	local v8 = math.ldexp;
	local v9 = getfenv or function()
		return _ENV;
	end;
	local v10 = setmetatable;
	local v11 = pcall;
	local v12 = select;
	local v13 = unpack or table.unpack;
	local v14 = tonumber;
	local function v15(v16, v17, ...)
		local v18 = 0;
		local v19;
		local v20;
		local v21;
		local v22;
		local v23;
		local v24;
		local v25;
		local v26;
		local v27;
		local v28;
		local v29;
		local v30;
		while true do
			if (v18 == 1) then
				function v21(v31, v32, v33)
					if v33 then
						local v73 = (v31 / ((5 - 3) ^ (v32 - (1 + 0)))) % ((7 - 5) ^ (((v33 - (2 - 1)) - (v32 - (1 - 0))) + (2 - (3 - 2))));
						return v73 - (v73 % (2 - 1));
					else
						local v74 = 0 + (492 - (36 + 456));
						local v75;
						while true do
							if (v74 == 0) then
								v75 = (2 + 0) ^ (v32 - (1 + 0));
								return (((v31 % (v75 + v75)) >= v75) and (3 - 2)) or (812 - (366 + 446));
							end
						end
					end
				end
				v22 = nil;
				function v22()
					local v34 = v1(v16, v19, v19);
					v19 = v19 + 1;
					return v34;
				end
				v23 = nil;
				v18 = 2;
			end
			if (v18 == 0) then
				v19 = 1;
				v20 = nil;
				v16 = v4(v3(v16, 5), "..", function(v35)
					if (v1(v35, 2) == 79) then
						v20 = v0(v3(v35, 1, 1));
						return "";
					else
						local v76 = v2(v0(v35, 16));
						if v20 then
							local v95 = v5(v76, v20);
							v20 = nil;
							return v95;
						else
							return v76;
						end
					end
				end);
				v21 = nil;
				v18 = 1;
			end
			if (v18 == 3) then
				function v25()
					local v36 = v24();
					local v37 = v24();
					local v38 = 2 - 1;
					local v39 = (v21(v37, 1 + 0, 40 - 20) * (2 ^ (83 - 51))) + v36;
					local v40 = v21(v37, 1669 - (94 + 1554), 76 - 45);
					local v41 = ((v21(v37, 32) == (1 + 0)) and -(1885 - (1797 + (415 - (233 + 95))))) or (1 + 0);
					if (v40 == (793 - ((1863 - 1188) + 118))) then
						if (v39 == (0 - 0)) then
							return v41 * (0 + 0);
						else
							v40 = 1;
							v38 = (0 - 0) - 0;
						end
					elseif (v40 == (133 + 1914)) then
						return ((v39 == (0 - 0)) and (v41 * (((2 - 1) + 0 + 0) / (0 - 0)))) or (v41 * NaN);
					end
					return v8(v41, v40 - (1980 - 957)) * (v38 + (v39 / ((2 + 0) ^ ((251 - (15 + 135)) - (38 + 11)))));
				end
				v26 = nil;
				function v26(v42)
					local v43;
					if not v42 then
						v42 = v24();
						if (v42 == (788 - (382 + 406))) then
							return "";
						end
					end
					v43 = v3(v16, v19, (v19 + v42) - (1041 - (287 + 753)));
					v19 = v19 + v42;
					local v44 = {};
					for v66 = 1, #v43 do
						v44[v66] = v2(v1(v3(v43, v66, v66)));
					end
					return v6(v44);
				end
				v27 = v24;
				v18 = 4;
			end
			if (v18 == 4) then
				v28 = nil;
				function v28(...)
					return {...}, v12("#", ...);
				end
				v29 = nil;
				function v29()
					local v45 = 0;
					local v46;
					local v47;
					local v48;
					local v49;
					local v50;
					local v51;
					local v52;
					local v53;
					while true do
						if (v45 ~= (46 - (31 + 12))) then
						else
							local v87 = 0 - 0;
							while true do
								if ((4 - 3) == v87) then
									v45 = 4 + 0;
									break;
								end
								if (v87 == (1412 - (712 + 700))) then
									v52 = nil;
									v53 = nil;
									v87 = 133 - (43 + 89);
								end
							end
						end
						if ((7 - 3) == v45) then
							while true do
								if (v46 == (1355 - (776 + 576))) then
									v53 = nil;
									while true do
										local v105 = 0;
										local v106;
										while true do
											if (v105 ~= (0 - 0)) then
											else
												v106 = 0 - 0;
												while true do
													if (0 ~= v106) then
													else
														local v111 = 0;
														local v112;
														while true do
															if (v111 == 0) then
																v112 = 473 - (360 + 113);
																while true do
																	if (0 ~= v112) then
																	else
																		local v119 = 0;
																		while true do
																			if (v119 == (1 + 0)) then
																				v112 = 1;
																				break;
																			end
																			if (v119 ~= (1724 - (1684 + 40))) then
																			else
																				if (v47 ~= (6 - 3)) then
																				else
																					local v127 = 0;
																					local v128;
																					while true do
																						if (v127 ~= (0 + 0)) then
																						else
																							v128 = 0;
																							while true do
																								if (0 == v128) then
																									local v305 = 0;
																									while true do
																										if (v305 == 0) then
																											for v396 = 1238 - (320 + 917), v24() do
																												v49[v396 - 1] = v29();
																											end
																											for v398 = 1 + 0, v24() do
																												v50[v398] = v24();
																											end
																											v305 = 1 - 0;
																										end
																										if (v305 == 1) then
																											v128 = 1;
																											break;
																										end
																									end
																								end
																								if (v128 == (1 + 0)) then
																									return v51;
																								end
																							end
																							break;
																						end
																					end
																				end
																				if (v47 == 0) then
																					local v129 = 0;
																					local v130;
																					while true do
																						if ((400 - (289 + 111)) == v129) then
																							v130 = 0;
																							while true do
																								if (v130 == 1) then
																									v50 = {};
																									v47 = 1 - 0;
																									break;
																								end
																								if (v130 ~= (0 + 0)) then
																								else
																									local v306 = 0 + 0;
																									while true do
																										if (v306 == (1 + 0)) then
																											v130 = 1;
																											break;
																										end
																										if (v306 == 0) then
																											v48 = {};
																											v49 = {};
																											v306 = 1;
																										end
																									end
																								end
																							end
																							break;
																						end
																					end
																				end
																				v119 = 1;
																			end
																		end
																	end
																	if (v112 ~= 1) then
																	else
																		v106 = 1;
																		break;
																	end
																end
																break;
															end
														end
													end
													if (v106 ~= (1 + 0)) then
													else
														if (1 ~= v47) then
														else
															local v113 = 0 + 0;
															local v114;
															while true do
																if ((1839 - (1355 + 484)) == v113) then
																	v114 = 575 - (327 + 248);
																	while true do
																		if ((0 + 0) == v114) then
																			local v120 = 0 - 0;
																			while true do
																				if (v120 ~= 0) then
																				else
																					v51 = {v48,v49,nil,v50};
																					v52 = v24();
																					v120 = 1;
																				end
																				if (v120 ~= 1) then
																				else
																					v114 = 1;
																					break;
																				end
																			end
																		end
																		if (v114 == (633 - (50 + 582))) then
																			v53 = {};
																			v47 = 2 - 0;
																			break;
																		end
																	end
																	break;
																end
															end
														end
														if (v47 == (8 - 6)) then
															local v115 = 0;
															local v116;
															while true do
																if (v115 == 0) then
																	v116 = 0;
																	while true do
																		if (v116 == 0) then
																			local v121 = 0;
																			local v122;
																			while true do
																				if (v121 == 0) then
																					v122 = 0;
																					while true do
																						if ((1970 - (774 + 1195)) ~= v122) then
																						else
																							v116 = 1;
																							break;
																						end
																						if (v122 == 0) then
																							local v275 = 0 - 0;
																							while true do
																								if (v275 == (1802 - (840 + 961))) then
																									v122 = 1;
																									break;
																								end
																								if (v275 ~= (0 - 0)) then
																								else
																									for v347 = 1, v52 do
																										local v348 = 0 + 0;
																										local v349;
																										local v350;
																										local v351;
																										local v352;
																										while true do
																											if (1 == v348) then
																												v351 = nil;
																												v352 = nil;
																												v348 = 2;
																											end
																											if (v348 ~= (2 + 0)) then
																											else
																												while true do
																													if (v349 ~= 1) then
																													else
																														v352 = nil;
																														while true do
																															if (v350 ~= (1713 - (570 + 1143))) then
																															else
																																v351 = v22();
																																v352 = nil;
																																v350 = 829 - (15 + 813);
																															end
																															if (v350 == 1) then
																																if (v351 == 1) then
																																	v352 = v22() ~= 0;
																																elseif (v351 == 2) then
																																	v352 = v25();
																																elseif (v351 == 3) then
																																	v352 = v26();
																																end
																																v53[v347] = v352;
																																break;
																															end
																														end
																														break;
																													end
																													if (v349 ~= 0) then
																													else
																														local v429 = 0;
																														while true do
																															if (v429 == (1 + 0)) then
																																v349 = 1;
																																break;
																															end
																															if (0 == v429) then
																																v350 = 0;
																																v351 = nil;
																																v429 = 1 + 0;
																															end
																														end
																													end
																												end
																												break;
																											end
																											if (v348 == (1771 - (1063 + 708))) then
																												v349 = 0;
																												v350 = nil;
																												v348 = 4 - 3;
																											end
																										end
																									end
																									v51[6 - 3] = v22();
																									v275 = 1 + 0;
																								end
																							end
																						end
																					end
																					break;
																				end
																			end
																		end
																		if (1 == v116) then
																			for v123 = 1993 - (1572 + 420), v24() do
																				local v124 = 375 - (264 + 111);
																				local v125;
																				local v126;
																				while true do
																					if (v124 == (0 + 0)) then
																						v125 = 0 + 0;
																						v126 = nil;
																						v124 = 1 + 0;
																					end
																					if (1 == v124) then
																						while true do
																							if (v125 == (0 - 0)) then
																								v126 = v22();
																								if (v21(v126, 2 - 1, 1) ~= (0 + 0)) then
																								else
																									local v308 = 0 + 0;
																									local v309;
																									local v310;
																									local v311;
																									local v312;
																									while true do
																										if (v308 == 2) then
																											while true do
																												if (v309 == (1 + 0)) then
																													local v415 = 1145 - (482 + 663);
																													while true do
																														if (v415 ~= (2 - 1)) then
																														else
																															v309 = 2;
																															break;
																														end
																														if ((1218 - (987 + 231)) == v415) then
																															v312 = {v23(),v23(),nil,nil};
																															if (v310 == 0) then
																																local v455 = 0;
																																while true do
																																	if ((0 + 0) == v455) then
																																		v312[1812 - (10 + 1799)] = v23();
																																		v312[4] = v23();
																																		break;
																																	end
																																end
																															elseif (v310 == (1 - 0)) then
																																v312[1552 - (116 + 1433)] = v24();
																															elseif (v310 == 2) then
																																v312[3] = v24() - ((2 + 0) ^ (16 + 0));
																															elseif (v310 == (740 - (270 + 467))) then
																																local v469 = 0 - 0;
																																while true do
																																	if (0 == v469) then
																																		v312[4 - 1] = v24() - (2 ^ 16);
																																		v312[1206 - (1045 + 157)] = v23();
																																		break;
																																	end
																																end
																															end
																															v415 = 1;
																														end
																													end
																												end
																												if (v309 ~= (1730 - (1638 + 89))) then
																												else
																													if (v21(v311, 3, 1 + 2) == 1) then
																														v312[4] = v53[v312[937 - (67 + 866)]];
																													end
																													v48[v123] = v312;
																													break;
																												end
																												if (v309 == 2) then
																													local v417 = 0;
																													local v418;
																													while true do
																														if (v417 ~= (0 + 0)) then
																														else
																															v418 = 0;
																															while true do
																																if (v418 == 0) then
																																	if (v21(v311, 2 - 1, 1282 - (403 + 878)) == (348 - (109 + 238))) then
																																		v312[1 + 1] = v53[v312[2 - 0]];
																																	end
																																	if (v21(v311, 2, 2) ~= (1 - 0)) then
																																	else
																																		v312[6 - 3] = v53[v312[11 - 8]];
																																	end
																																	v418 = 3 - 2;
																																end
																																if (v418 == 1) then
																																	v309 = 3;
																																	break;
																																end
																															end
																															break;
																														end
																													end
																												end
																												if (v309 ~= (985 - (372 + 613))) then
																												else
																													v310 = v21(v126, 5 - 3, 8 - 5);
																													v311 = v21(v126, 4, 1059 - (499 + 554));
																													v309 = 1 + 0;
																												end
																											end
																											break;
																										end
																										if (v308 ~= 1) then
																										else
																											local v377 = 0 - 0;
																											while true do
																												if (v377 == (0 + 0)) then
																													v311 = nil;
																													v312 = nil;
																													v377 = 1 + 0;
																												end
																												if (v377 == (1 - 0)) then
																													v308 = 2;
																													break;
																												end
																											end
																										end
																										if (v308 ~= (894 - (543 + 351))) then
																										else
																											local v378 = 0 - 0;
																											while true do
																												if (v378 == 1) then
																													v308 = 1;
																													break;
																												end
																												if ((0 - 0) ~= v378) then
																												else
																													v309 = 0 + 0;
																													v310 = nil;
																													v378 = 1;
																												end
																											end
																										end
																									end
																								end
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			v47 = 3;
																			break;
																		end
																	end
																	break;
																end
															end
														end
														break;
													end
												end
												break;
											end
										end
									end
									break;
								end
								if (v46 == (343 - (32 + 310))) then
									local v100 = 0 + 0;
									local v101;
									while true do
										if (v100 == 0) then
											v101 = 0;
											while true do
												if (1 == v101) then
													v46 = 2;
													break;
												end
												if (v101 == (0 + 0)) then
													local v107 = 0 + 0;
													while true do
														if (v107 ~= 0) then
														else
															v49 = nil;
															v50 = nil;
															v107 = 1;
														end
														if (v107 ~= (1 + 0)) then
														else
															v101 = 1;
															break;
														end
													end
												end
											end
											break;
										end
									end
								end
								if (v46 == 2) then
									local v102 = 0 + 0;
									while true do
										if (v102 ~= 0) then
										else
											v51 = nil;
											v52 = nil;
											v102 = 1;
										end
										if (v102 == (849 - (614 + 234))) then
											v46 = 3;
											break;
										end
									end
								end
								if (0 ~= v46) then
								else
									local v103 = 0;
									local v104;
									while true do
										if (v103 ~= 0) then
										else
											v104 = 0 + 0;
											while true do
												if (v104 == 0) then
													local v108 = 0;
													while true do
														if (v108 == 1) then
															v104 = 370 - (132 + 237);
															break;
														end
														if (v108 == (0 + 0)) then
															v47 = 0 - 0;
															v48 = nil;
															v108 = 1 - 0;
														end
													end
												end
												if (v104 == 1) then
													v46 = 1 - 0;
													break;
												end
											end
											break;
										end
									end
								end
							end
							break;
						end
						if (v45 ~= (4 - 2)) then
						else
							local v88 = 0;
							while true do
								if (v88 ~= 1) then
								else
									v45 = 3 - 0;
									break;
								end
								if ((0 + 0) ~= v88) then
								else
									v50 = nil;
									v51 = nil;
									v88 = 1633 - (915 + 717);
								end
							end
						end
						if (v45 == 1) then
							local v89 = 385 - (225 + 160);
							while true do
								if (v89 ~= (1 + 0)) then
								else
									v45 = 2;
									break;
								end
								if (v89 == 0) then
									v48 = nil;
									v49 = nil;
									v89 = 1 - 0;
								end
							end
						end
						if (v45 == 0) then
							v46 = 1399 - (106 + 1293);
							v47 = nil;
							v45 = 1;
						end
					end
				end
				v18 = 5;
			end
			if (v18 == 5) then
				v30 = nil;
				function v30(v54, v55, v56)
					local v57 = v54[1];
					local v58 = v54[2];
					local v59 = v54[3];
					return function(...)
						local v68 = 1;
						local v69 = -1;
						local v70 = {...};
						local v71 = v12("#", ...) - 1;
						local function v72()
							local v77 = v57;
							local v78 = v58;
							local v79 = v59;
							local v80 = v28;
							local v81 = {};
							local v82 = {};
							local v83 = {};
							for v90 = 0 - 0, v71 do
								if (((1689 + 2809) == (6111 - (254 + 1359))) and (v90 >= v79)) then
									v81[v90 - v79] = v70[v90 + (1450 - (1019 + (755 - (241 + 84))))];
								else
									v83[v90] = v70[v90 + 1];
								end
							end
							local v84 = (v71 - v79) + (2 - 1);
							local v85;
							local v86;
							while true do
								local v91 = 0 - 0;
								local v92;
								local v93;
								while true do
									if ((v91 == (0 - 0)) or (1555 > 2066)) then
										v92 = 0 + (0 - 0);
										v93 = nil;
										v91 = 1561 - (999 + 561);
									end
									if ((v91 == (3 - 2)) or (3045 <= 398)) then
										while true do
											if ((4531 > (1126 - (987 - 698))) and (v92 == (0 - 0))) then
												v93 = 0;
												while true do
													if ((((7338 - 5372) - (92 + 825)) <= ((6668 - (292 + 94)) - 2392)) and (v93 == (774 - (287 + 487)))) then
														local v109 = 0;
														local v110;
														while true do
															if ((v109 == (0 + 0)) or (((1302 + 382) - 652) <= (112 + 10 + 54))) then
																v110 = (0 - 0) + 0;
																while true do
																	if (((5622 - (398 + 1255)) == (1086 + 2883)) and (v110 == (0 + 0))) then
																		v85 = v77[v68];
																		v86 = v85[1 + 0];
																		v110 = 1632 - (920 + 711);
																	end
																	if ((v110 == (1 + 0)) or ((8509 - 5045) < ((300 - 62) + 186))) then
																		v93 = 2 - 1;
																		break;
																	end
																end
																break;
															end
														end
													end
													if ((565 < ((14613 - 8477) - (4162 - 1788))) and (v93 == (1 + 0))) then
														if ((3817 < (3267 + 574)) and (v86 <= (4 + 32))) then
															if (((1757 - (544 + (423 - 133))) >= (213 + (221 - (177 + 5)))) and (v86 <= (24 - 7))) then
																if ((v86 <= (12 - 4)) or ((5181 - (2056 - (60 + 37))) <= 2008)) then
																	if (((16473 - 12947) == (4982 - (1209 + (627 - (163 + 217))))) and (v86 <= (1 + (5 - 3)))) then
																		if (((4537 - (428 + 349)) >= 1776) and (v86 <= (1 + 0))) then
																			if ((v86 > (0 + 0)) or ((1520 + 1667) < (2179 - (539 + 138)))) then
																				local v131 = 0 + 0;
																				local v132;
																				while true do
																					if (((3042 - (216 + 998)) <= (1311 + 726)) and (v131 == (438 - (390 + 48)))) then
																						v132 = v85[1922 - (1521 + 399)];
																						v83[v132] = v83[v132](v13(v83, v132 + (3 - 2), v85[(14 - 10) - 1]));
																						break;
																					end
																				end
																			else
																				v83[v85[2]][v83[v85[1 + 2]]] = v83[v85[4 + 0]];
																			end
																		elseif ((v86 > (4 - 2)) or ((4726 - (553 + 1066)) < (907 - (5 + (786 - (329 + 228)))))) then
																			local v135 = 0 - 0;
																			local v136;
																			local v137;
																			while true do
																				if ((1382 < (8706 - (5803 - (323 + 318)))) and (v135 == (279 - (105 + 174)))) then
																					v136 = 46 - (36 + 10);
																					v137 = nil;
																					v135 = 3 - 2;
																				end
																				if (((486 + 2194) >= (5254 - 3168)) and (1 == v135)) then
																					while true do
																						if (((659 + 562) <= 3977) and (v136 == (435 - (233 + 202)))) then
																							v137 = v85[5 - 3];
																							v83[v137](v83[v137 + 1]);
																							break;
																						end
																					end
																					break;
																				end
																			end
																		elseif (not v83[v85[918 - (558 + 215 + (751 - (233 + 375)))]] or (3038 < (799 + 482))) then
																			v68 = v68 + (1004 - (353 + 650));
																		else
																			v68 = v85[3];
																		end
																	elseif ((v86 <= 5) or ((1540 - (79 + 487)) == (5942 - 3632))) then
																		if ((v86 == (1052 - (368 + 680))) or ((3239 - 2186) > (1556 + 164))) then
																			v83[v85[1 + 1]] = v83[v85[3]] / v85[415 - (292 + 119)];
																		else
																			local v139 = 0 - 0;
																			local v140;
																			local v141;
																			local v142;
																			local v143;
																			while true do
																				if (((5 - 3) == v139) or (4932 == (77 + 1132))) then
																					while true do
																						if ((0 == v140) or ((344 - 164) > (702 - (306 + 147)))) then
																							local v314 = 0 + 0;
																							local v315;
																							while true do
																								if ((v314 == (0 - 0)) or ((4442 - (126 + 947)) < ((608 - 329) - (21 + 30)))) then
																									v315 = 0 - 0;
																									while true do
																										if (((2872 + 838) > (462 + 122 + 913)) and (v315 == ((0 - 0) - 0))) then
																											v141 = v85[2 + 0 + 0];
																											v142 = {v83[v141](v13(v83, v141 + (321 - ((1879 - (939 + 907)) + 287)), v85[(1528 - (118 + 70)) - (698 + 639)]))};
																											v315 = 1701 - ((4365 - 3393) + 728);
																										end
																										if ((v315 == (1 + 0)) or (4309 == 2208)) then
																											v140 = 1 - 0;
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																						if (((3020 + 11) <= 4596) and (v140 == (1423 - (502 + 920)))) then
																							v143 = 1033 - ((701 - 226) + (2210 - 1652));
																							for v353 = v141, v85[3 + 1] do
																								local v354 = 0 - 0;
																								local v355;
																								while true do
																									if ((v354 == (0 + 0 + 0)) or (4420 >= (6508 - (1392 + (596 - 296))))) then
																										v355 = 0 - 0;
																										while true do
																											if ((v355 == (0 - 0)) or ((4808 - (1195 + 146)) <= (241 + 3150))) then
																												v143 = v143 + (3 - 2);
																												v83[v353] = v142[v143];
																												break;
																											end
																										end
																										break;
																									end
																								end
																							end
																							break;
																						end
																					end
																					break;
																				end
																				if ((v139 == 1) or (3679 < (3580 - 1684))) then
																					local v278 = 0;
																					while true do
																						if ((v278 == (0 - 0)) or ((419 - 334) >= (1994 - (529 + 118 + 531)))) then
																							v142 = nil;
																							v143 = nil;
																							v278 = 1 - 0;
																						end
																						if ((20 <= (1775 + 13)) and (v278 == (1 + 0))) then
																							v139 = 1 + (2 - 1);
																							break;
																						end
																					end
																				end
																				if (((6166 - (826 + 1134)) == 4206) and (v139 == (1179 - (1120 + 59)))) then
																					local v279 = 0 - 0;
																					while true do
																						if (((682 + 151) < (6695 - 2229)) and (v279 == 1)) then
																							v139 = (678 - (329 + 347)) - 1;
																							break;
																						end
																						if ((v279 == 0) or ((808 + 1098) == 3060)) then
																							v140 = 0;
																							v141 = nil;
																							v279 = (1561 + 145) - (1018 + 687);
																						end
																					end
																				end
																			end
																		end
																	elseif ((v86 <= (84 - (63 + 15))) or ((1157 - 853) > ((6454 - (1740 + 23)) - (7 + 5)))) then
																		v83[v85[2]] = v83[v85[3]] % v83[v85[4]];
																	elseif ((3935 > (288 + 611 + 515)) and (v86 == 7)) then
																		v83[v85[1 + 1]] = v83[v85[4 - 1]] + v85[5 - 1];
																	elseif ((v83[v85[2 + 0]] == v83[v85[120 - (19 + 97)]]) or ((1533 + 2927) < (4239 - (145 + 507)))) then
																		v68 = v68 + 1;
																	else
																		v68 = v85[2 + 1];
																	end
																elseif ((v86 <= (28 - 16)) or ((3955 - (423 + 1274)) > (1754 + 2291))) then
																	if ((v86 <= (36 - 26)) or ((21 + 440) == 2778)) then
																		if ((((6776 - 4578) + 418) > 2031) and (v86 == 9)) then
																			if ((v85[2] ~= v83[v85[4]]) or (1825 >= (2176 + 1275))) then
																				v68 = v68 + 1;
																			else
																				v68 = v85[1 + (8 - 6)];
																			end
																		elseif (((11626 - (8882 - (381 + 68))) == (4992 - (480 + 1319))) and (v85[2 + 0] == v83[v85[17 - 13]])) then
																			v68 = v68 + (1 - 0);
																		else
																			v68 = v85[1581 - (1515 + 50 + 13)];
																		end
																	elseif (((1261 + 962) <= ((5867 - (566 + 20)) - (682 + 310))) and (v86 == 11)) then
																		if ((v83[v85[1 + 1]] ~= v85[15 - 11]) or ((1879 - (69 + (2808 - 1338))) == (2828 - (15 + (132 - (103 + 26)))))) then
																			v68 = v68 + (2 - 1);
																		else
																			v68 = v85[1 + 2];
																		end
																	else
																		local v145 = 531 - (201 + 172 + 158);
																		local v146;
																		while true do
																			if ((v145 == (0 - 0)) or ((1155 + 3078) == (5723 - 4214))) then
																				v146 = v85[3 - 1];
																				do
																					return v83[v146](v13(v83, v146 + 1 + 0, v69));
																				end
																				break;
																			end
																		end
																	end
																elseif (((1854 + (3963 - (267 + 1316))) == 4234) and (v86 <= (2005 - (690 + 1301)))) then
																	if (((4187 - (4433 - 1966)) <= (4264 - (126 + 41))) and (v86 > ((10 - 3) + 6))) then
																		v83[v85[2]] = v30(v78[v85[1890 - (1604 + 283)]], nil, v56);
																	else
																		do
																			return v83[v85[1682 - (1013 + 667)]];
																		end
																	end
																elseif ((v86 <= (8 + 7)) or ((583 + 3924) == (1161 - 680))) then
																	v83[v85[2]] = v83[v85[5 - 2]] * v83[v85[249 - (6 + 239)]];
																elseif ((v86 == (2 + 14)) or ((4452 - (714 + 1112)) > 4517)) then
																	local v229 = 0 - (0 - 0);
																	local v230;
																	while true do
																		if (((4769 - 3308) < (2112 - (83 + 207))) and (v229 == 0)) then
																			v230 = v85[7 - 5];
																			do
																				return v83[v230](v13(v83, v230 + 1 + 0, v85[3]));
																			end
																			break;
																		end
																	end
																else
																	local v231 = 0 - 0;
																	local v232;
																	local v233;
																	local v234;
																	while true do
																		if (((0 + 0) == v231) or ((4396 - (578 + 1322)) < 652)) then
																			v232 = 0 - 0;
																			v233 = nil;
																			v231 = 1;
																		end
																		if ((v231 == ((1537 - 361) - (866 + 309))) or (3313 == 145)) then
																			v234 = nil;
																			while true do
																				if (((5974 - 4775) <= (2273 - (546 + 417))) and (v232 == (1 - 0))) then
																					while true do
																						if ((v233 == (0 - (0 - 0))) or ((2920 - (223 + 1014)) <= ((6011 - 3557) - 1501))) then
																							v234 = v85[2];
																							do
																								return v13(v83, v234, v69);
																							end
																							break;
																						end
																					end
																					break;
																				end
																				if ((v232 == (423 - (386 + 37))) or (4376 <= 1620)) then
																					v233 = 0 - 0;
																					v234 = nil;
																					v232 = 2 - 1;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif ((v86 <= (83 - 57)) or ((7627 - 4424) > (630 + 4047))) then
																if ((v86 <= (279 - (1 + 51 + 206))) or (((6075 - (514 + 470)) - (1137 + 677)) >= (11173 - 6962))) then
																	if ((v86 <= (1938 - (1916 + 3))) or ((433 - (979 - 682)) > 3119)) then
																		if ((v86 == (28 - 10)) or ((1399 - 698) >= (2714 - (752 + 64)))) then
																			if (((715 - ((1288 - 975) + 21)) <= (2181 + 625)) and (v85[2 + 0] < v83[v85[2 + 2]])) then
																				v68 = v85[1059 - (848 + 208)];
																			else
																				v68 = v68 + (697 - ((1512 - 945) + 129));
																			end
																		else
																			v83[v85[4 - 2]][v83[v85[11 - 8]]] = v85[5 - 1];
																		end
																	elseif ((v86 == (1843 - (781 + 1042))) or ((1866 + 1610) < (3978 - (679 + 465)))) then
																		local v151 = 0 - 0;
																		local v152;
																		local v153;
																		local v154;
																		local v155;
																		while true do
																			if (((4168 - 2534) < (5721 - 3680)) and (v151 == (1984 - (1973 + 10)))) then
																				v154 = nil;
																				v155 = nil;
																				v151 = 1 + 1;
																			end
																			if ((253 == (949 - (134 + 194 + 368))) and (v151 == (1350 - (376 + 972)))) then
																				while true do
																					if ((v152 == (330 - (292 + 38))) or (2997 >= (15101 - 10105))) then
																						local v316 = 0 + 0;
																						while true do
																							if (((2974 - (1457 + 315)) < ((2274 - (968 + 302)) + (1908 - 1467))) and (v316 == (3 - 2))) then
																								v152 = 3 - 2;
																								break;
																							end
																							if ((v316 == (0 - 0)) or ((3366 - 1599) > (13307 - 9549))) then
																								v153 = v85[1416 - (681 + 733)];
																								v154 = {v83[v153](v13(v83, v153 + 1 + 0, v69))};
																								v316 = 1 - 0;
																							end
																						end
																					end
																					if ((v152 == (1 + 0)) or (((5804 - 3460) - (97 + 199)) >= 2327)) then
																						v155 = 0 - 0;
																						for v356 = v153, v85[4] do
																							local v357 = (1943 - 1317) - (393 + 233);
																							local v358;
																							while true do
																								if (((5707 - (1069 + 393)) >= (3065 + (2398 - 1689))) and (v357 == (0 - 0))) then
																									v358 = 0 + 0;
																									while true do
																										if (((3549 - (19 + 1443 + 95)) <= 3561) and (v358 == ((0 - 0) - 0))) then
																											v155 = v155 + (364 - (147 + 216));
																											v83[v356] = v154[v155];
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																						break;
																					end
																				end
																				break;
																			end
																			if (((453 + 3942) == (8744 - 4349)) and ((0 + 0) == v151)) then
																				v152 = 0 + 0;
																				v153 = nil;
																				v151 = 1;
																			end
																		end
																	elseif ((3082 > (3368 - (285 + 446))) and (v83[v85[2 - 0]] > v85[8 - 4])) then
																		v68 = v68 + 1 + 0;
																	else
																		v68 = v85[1 + 2];
																	end
																elseif (((2789 + 82) > (979 + 1136)) and (v86 <= (90 - 67))) then
																	if (((198 + 1800) > ((8465 - 5439) - 1300)) and (v86 == 22)) then
																		do
																			return;
																		end
																	else
																		v83[v85[1561 - (44 + 1515)]][v85[6 - 3]] = v83[v85[(39 - 30) - 5]];
																	end
																elseif ((547 <= (12030 - 8015)) and (v86 <= (116 - 92))) then
																	local v158 = 0 + 0;
																	local v159;
																	local v160;
																	while true do
																		if (((3085 - (125 + 791)) < (438 + 1984)) and (1 == v158)) then
																			while true do
																				if ((v159 == (384 - (108 + 276))) or (3727 >= (5467 - (304 + 757)))) then
																					v160 = v85[2 + 0];
																					v83[v160] = v83[v160]();
																					break;
																				end
																			end
																			break;
																		end
																		if (((227 + 699) <= (94 + 2769)) and ((0 + 0) == v158)) then
																			v159 = 0 + 0;
																			v160 = nil;
																			v158 = 1 + 0;
																		end
																	end
																elseif ((v86 > 25) or ((2427 + (794 - (260 + 362))) <= (6333 - 4342))) then
																	local v237 = 0 - 0;
																	local v238;
																	local v239;
																	local v240;
																	local v241;
																	while true do
																		if (((1132 + 279) > (1494 - (208 + 1015))) and (v237 == 1)) then
																			v240 = nil;
																			v241 = nil;
																			v237 = (17 - 13) - (4 - 2);
																		end
																		if ((v237 == (2 - 0)) or (2749 == (1642 - ((556 - 292) + 46)))) then
																			while true do
																				if (((7382 - (5851 - (26 + 882))) > (3940 - 1536)) and (1 == v238)) then
																					v241 = v85[964 - (817 + 144)];
																					for v380 = 1 + 0, v241 do
																						v240[v380] = v83[v239 + v380];
																					end
																					break;
																				end
																				if (((822 - 597) < 3784) and (v238 == ((0 - 0) + 0))) then
																					local v373 = 0;
																					while true do
																						if ((v373 == (1 + 0)) or ((2398 - 1225) > (4918 - (45 + 540)))) then
																							v238 = 2 - 1;
																							break;
																						end
																						if (((4461 - (397 + 526)) == (2318 + 1220)) and (v373 == (0 - 0))) then
																							v239 = v85[898 - (152 + 744)];
																							v240 = v83[v239];
																							v373 = 1 + (1390 - (9 + 1381));
																						end
																					end
																				end
																			end
																			break;
																		end
																		if ((((3872 - (378 + 18)) - (778 + 263)) < 4862) and ((0 + 0) == v237)) then
																			v238 = 0;
																			v239 = nil;
																			v237 = 1 + 0;
																		end
																	end
																else
																	local v242 = 783 - (152 + (1645 - 1014));
																	local v243;
																	local v244;
																	local v245;
																	while true do
																		if (((3711 - (1348 + 386)) == (3001 - (552 + 472))) and (v242 == 0)) then
																			v243 = 0 - 0;
																			v244 = nil;
																			v242 = 1 + 0;
																		end
																		if ((1 == v242) or ((12452 - 8058) <= 903)) then
																			v245 = nil;
																			while true do
																				if ((1925 >= (503 + 74)) and (v243 == (1697 - (1086 + 611)))) then
																					v244 = v85[1 + 1];
																					v245 = v83[v244];
																					v243 = 1030 - (633 + 396);
																				end
																				if ((2711 > 968) and (v243 == ((3943 - 2726) - (205 + 1011)))) then
																					for v383 = v244 + (750 - (708 + 41)), v85[3] do
																						v7(v245, v83[v383]);
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif ((v86 <= (102 - 71)) or (((12097 - 7239) - (1608 + 83 + 263)) <= (723 - (351 + 77)))) then
																if ((v86 <= (1554 - (484 + 811 + 231))) or ((1991 + 435) < (580 - (175 + 4 + 4)))) then
																	if (((707 + (2114 - 1424)) < (15019 - (12108 - (1484 + 447)))) and (v86 > (63 - 36))) then
																		local v161 = 0 + 0;
																		local v162;
																		local v163;
																		local v164;
																		local v165;
																		while true do
																			if (((4403 - 2994) > 1326) and (v161 == (0 - (1713 - (94 + 1619))))) then
																				local v281 = 0 - (1766 - (1252 + 514));
																				while true do
																					if ((1094 < (2267 + 849)) and (v281 == (1 - 0))) then
																						v161 = 964 - (165 + 798);
																						break;
																					end
																					if ((0 == v281) or ((3439 - (473 + 214)) >= (15464 - 11341))) then
																						v162 = 1412 - (846 + (744 - (24 + 154)));
																						v163 = nil;
																						v281 = 1 + 0;
																					end
																				end
																			end
																			if (((3757 - 2936) == ((3926 - (1146 + 338)) - 1621)) and (v161 == 2)) then
																				while true do
																					if ((v162 == (0 + 0)) or ((98 + 162) == 2483)) then
																						local v319 = 0;
																						local v320;
																						while true do
																							if ((v319 == ((1308 - (25 + 1283)) - 0)) or ((5812 - 3430) == 4512)) then
																								v320 = 1083 - (931 + 152);
																								while true do
																									if (((7499 - 5483) > (944 + 338)) and (v320 == (1915 - (230 + 1684)))) then
																										v162 = 731 - (321 + (1205 - 796));
																										break;
																									end
																									if (((8159 - 3183) > (14334 - 11313)) and (v320 == (16 - (8 + 8)))) then
																										local v420 = 0;
																										while true do
																											if (((375 + 239) == (2394 - (930 + 850))) and ((0 + 0) == v420)) then
																												v163 = v85[3 - 1];
																												v164 = v83[v163];
																												v420 = 1 + 0;
																											end
																											if ((2732 <= (11116 - 6927)) and (v420 == (4 - 3))) then
																												v320 = 2 - 1;
																												break;
																											end
																										end
																									end
																								end
																								break;
																							end
																						end
																					end
																					if ((v162 == 1) or ((14292 - 9686) < 3316)) then
																						v165 = v83[v163 + ((362 + 240) - (351 + 249))];
																						if ((v165 > ((1265 - 752) - (481 + 32))) or ((4798 - (404 + 807)) > 3592)) then
																							if (((2540 - 1362) >= (51 + 895)) and (v164 > v83[v163 + (1 - 0)])) then
																								v68 = v85[3];
																							else
																								v83[v163 + (547 - (26 + 518))] = v164;
																							end
																						elseif ((v164 < v83[v163 + (2 - 1)]) or ((5346 - 1845) < ((13235 - 10035) - (574 + 461)))) then
																							v68 = v85[3];
																						else
																							v83[v163 + (8 - 5)] = v164;
																						end
																						break;
																					end
																				end
																				break;
																			end
																			if (((3831 - (158 + 679)) <= (5188 - (283 + 523))) and (v161 == (688 - (442 + 245)))) then
																				local v282 = 0 - 0;
																				while true do
																					if ((v282 == (1 + (1240 - (188 + 1052)))) or ((3037 - 1282) > (4502 - (788 + 931)))) then
																						v161 = 2;
																						break;
																					end
																					if (((0 + 0) == v282) or ((11973 - 8830) > (9946 - (18355 - 11794)))) then
																						v164 = nil;
																						v165 = nil;
																						v282 = 1311 - (1141 + 169);
																					end
																				end
																			end
																		end
																	elseif ((v85[2 + 0] < v83[v85[4]]) or (((10691 - 5144) - ((1223 - 469) + 1220)) <= (2596 + 799))) then
																		v68 = v68 + 1;
																	else
																		v68 = v85[3];
																	end
																elseif ((v86 <= (640 - (234 + 144 + 233))) or ((4912 - (315 + (1609 - 1227))) == (100 + 580))) then
																	if ((v85[2 + 0] < v85[8 - 4]) or ((19635 - 15670) > (3094 + 1390))) then
																		v68 = v68 + (2 - 1);
																	else
																		v68 = v85[2 + 1];
																	end
																elseif ((v86 > (20 + 4 + 6)) or (2819 <= ((3722 + 421) - (708 + 746)))) then
																	for v283 = v85[1125 - (620 + 503)], v85[2 + 1] do
																		v83[v283] = nil;
																	end
																else
																	v83[v85[1 + 1]] = v85[3 + 0];
																end
															elseif ((v86 <= (22 + 11)) or ((16354 - 11745) < 4136)) then
																if (((5393 - 3367) >= 262) and (v86 == 32)) then
																	v83[v85[1 + 1]] = v85[473 - (190 + 280)] ~= (0 + 0);
																else
																	local v167 = (0 - 0) + 0;
																	local v168;
																	local v169;
																	local v170;
																	local v171;
																	local v172;
																	while true do
																		if (((1824 - (679 + 799)) <= (1002 - 378)) and (v167 == (2 - 1))) then
																			local v285 = 1124 - (86 + 1038);
																			while true do
																				if ((v285 == 1) or ((17627 - 13600) <= (2898 - (4364 - 2790)))) then
																					v167 = 2 + 0;
																					break;
																				end
																				if (((4545 - (564 + 937)) == (2410 + 634)) and (v285 == (0 - 0))) then
																					v170 = nil;
																					v171 = nil;
																					v285 = 1;
																				end
																			end
																		end
																		if (((2711 + 1316) == (2354 + 1673)) and ((1105 - (286 + 819)) == v167)) then
																			v168 = 544 - (152 + 392);
																			v169 = nil;
																			v167 = 4 - 3;
																		end
																		if ((v167 == ((1928 - (1278 + 648)) + 0)) or ((3861 - (654 + 267)) == (4956 - (375 + 792)))) then
																			v172 = nil;
																			while true do
																				if ((v168 == ((0 - 0) - 0)) or ((3058 - (100 + 1076)) > 4521)) then
																					local v322 = 0 + 0;
																					local v323;
																					while true do
																						if ((2178 > (1073 + 220)) and (v322 == (0 + 0))) then
																							v323 = 1644 - (1071 + 573);
																							while true do
																								if ((3271 >= ((3160 - (406 + 1008)) - ((2905 - (412 + 1541)) + 210))) and (v323 == (151 - ((346 - 223) + 27)))) then
																									v168 = 1;
																									break;
																								end
																								if ((v323 == (0 + 0)) or ((2146 + 784) == (3215 - (48 + 204)))) then
																									local v421 = (0 + 0) - (0 - 0);
																									while true do
																										if (((607 - (9 + 240)) == (142 + 216)) and (v421 == (1 + (0 - 0)))) then
																											v323 = 1;
																											break;
																										end
																										if (((0 - (0 + 0)) == v421) or ((799 + 3886) < (3057 - (289 + (964 - 225))))) then
																											v169 = v85[1 + 1];
																											v170, v171 = v80(v83[v169](v83[v169 + ((4 + 0) - (2 + 1))]));
																											v421 = 38 - ((181 - (7 + 141)) + 4);
																										end
																									end
																								end
																							end
																							break;
																						end
																					end
																				end
																				if (((3014 - (194 + 849)) == (1838 + 133)) and (v168 == 1)) then
																					local v324 = 0;
																					while true do
																						if (((290 - 90) < ((9161 - 6124) + 1233)) and (v324 == (1 - 0))) then
																							v168 = 2 - 0;
																							break;
																						end
																						if (((2991 + 62) <= (3851 + 34)) and (v324 == (0 + 0))) then
																							v69 = (v171 + v169) - (3 - 2);
																							v172 = 0;
																							v324 = 2 - 1;
																						end
																					end
																				end
																				if (((1707 - (306 + 525)) == (128 + 280 + 468)) and (((6250 - 4324) - ((2333 - 1028) + 619)) == v168)) then
																					for v359 = v169, v69 do
																						local v360 = 0;
																						while true do
																							if ((v360 == (0 + 0)) or ((10417 - 6058) <= 600)) then
																								v172 = v172 + 1;
																								v83[v359] = v170[v172];
																								break;
																							end
																						end
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif ((v86 <= (1608 - (597 + 977))) or (4769 <= (444 + 777))) then
																local v173 = 0 + 0;
																local v174;
																while true do
																	if ((v173 == (1 + 0)) or (((19854 - 13711) - 1834) == 4704)) then
																		for v292 = v174, v69 do
																			local v293 = 0 + 0;
																			local v294;
																			while true do
																				if (((777 + 309) == (818 + 268)) and (v293 == (0 + 0))) then
																					v294 = v81[v292 - v174];
																					v83[v292] = v294;
																					break;
																				end
																			end
																		end
																		break;
																	end
																	if ((v173 == (179 - (173 + 6))) or (3922 < ((4971 - (666 + 637)) - (1568 + 163)))) then
																		v174 = v85[2 + 0];
																		v69 = (v174 + v84) - ((4 - 3) - 0);
																		v173 = 1 + 0;
																	end
																end
															elseif ((v86 > (11 + 24)) or ((4326 - (125 + 1141)) == (8347 - 6538))) then
																local v250 = 0 - 0;
																local v251;
																local v252;
																local v253;
																local v254;
																local v255;
																while true do
																	if (((3901 - (120 + 1140)) > 350) and (v250 == (0 - 0))) then
																		v251 = 1510 - (427 + 1083);
																		v252 = nil;
																		v250 = 1;
																	end
																	if (((14531 - 10599) > ((1991 + 6015) - 5332)) and (v250 == (1 + 1 + 0))) then
																		v255 = nil;
																		while true do
																			if ((v251 == 2) or (((14672 - 10688) - (1252 + 465)) < (2840 - (1227 + 597)))) then
																				for v384 = v252, v69 do
																					local v385 = 0 + 0;
																					while true do
																						if ((v385 == (0 - 0)) or ((6663 - 4736) > 2256)) then
																							v255 = v255 + (1890 - (205 + 1684));
																							v83[v384] = v253[v255];
																							break;
																						end
																					end
																				end
																				break;
																			end
																			if (((3565 - (538 + 224)) > (933 - (835 + 5))) and (1 == v251)) then
																				v69 = (v254 + v252) - 1;
																				v255 = 0;
																				v251 = 5 - 3;
																			end
																			if ((3261 >= (1308 - 864)) and ((0 - 0) == v251)) then
																				local v376 = 0 + 0 + 0;
																				while true do
																					if ((v376 == (1 + 0)) or ((1189 + 2012) < (3142 - 1385))) then
																						v251 = 1 + 0;
																						break;
																					end
																					if (((5526 - (418 + 986)) > 3902) and (v376 == (0 - 0))) then
																						v252 = v85[2];
																						v253, v254 = v80(v83[v252](v13(v83, v252 + (833 - (696 + 136)), v85[3 + 0])));
																						v376 = 1016 - (121 + 894);
																					end
																				end
																			end
																		end
																		break;
																	end
																	if (((2823 - (114 + 1557)) < 1840) and (v250 == ((200 + 1196) - ((2281 - 1532) + 646)))) then
																		v253 = nil;
																		v254 = nil;
																		v250 = 2;
																	end
																end
															elseif ((v85[2 - 0] == v85[(1099 - (405 + 692)) + 2]) or ((5881 - (9 + 903)) <= (411 + 283))) then
																v68 = v68 + (1 - 0);
															else
																v68 = v85[3];
															end
														elseif ((v86 <= (1493 - (623 + 360 + 456))) or ((9426 - 5235) < (2109 - (651 + 833)))) then
															if ((v86 <= (1119 - (918 + 156))) or (2276 <= (1683 - 981))) then
																if ((((6669 + 2013) - 5005) == 3677) and (v86 <= (26 + 14))) then
																	if (((4642 - (161 + 1189)) == ((7724 - 3675) - (146 + (1379 - (51 + 717))))) and (v86 <= (20 + 18))) then
																		if ((v86 == 37) or ((5756 - (294 + 604)) < (1357 + 1232))) then
																			v83[v85[2 + 0]]();
																		else
																			v83[v85[2 + 0]] = v83[v85[1 + 2]] + v83[v85[3 + 1]];
																		end
																	elseif (((1023 + 304) == (1789 - (270 + 192))) and (v86 > (1542 - (137 + 1366)))) then
																		if ((v83[v85[639 - (523 + 77 + 37)]] > v83[v85[11 - 7]]) or ((2693 - (10 + 253)) == (3155 - (893 + 657)))) then
																			v68 = v68 + 1 + 0;
																		else
																			v68 = v68 + v85[8 - 5];
																		end
																	else
																		v83[v85[1 + 1]] = #v83[v85[3]];
																	end
																elseif ((v86 <= (88 - (25 + 8 + 13))) or ((4876 - (393 + 570)) == (1962 + 1355))) then
																	if ((4551 > (4048 - (255 + 1585))) and (v86 == (11 + 30))) then
																		local v177 = 0;
																		local v178;
																		local v179;
																		local v180;
																		while true do
																			if (((1611 - 598) <= (5219 - ((893 - (53 + 30)) + 443))) and (1 == v177)) then
																				v180 = nil;
																				while true do
																					if ((v178 == 0) or ((5563 - 2227) == (2712 - (398 + 645 + 772)))) then
																						local v325 = (1836 - (1345 + 491)) - 0;
																						while true do
																							if (((8963 - 6451) == (2860 - (337 + 11))) and (v325 == (0 - 0))) then
																								v179 = v85[1709 - (760 + 946)];
																								v180 = v83[v179];
																								v325 = 2 - 1;
																							end
																							if ((v325 == ((1455 - (9 + 3)) - (1258 + 184))) or (3629 > (3189 + 54 + 1593))) then
																								v178 = 483 - (470 + 12);
																								break;
																							end
																						end
																					end
																					if ((3708 >= 3526) and ((1241 - (460 + 780)) == v178)) then
																						for v363 = v179 + 1, v85[996 - (48 + 159 + 785)] do
																							v180 = v180 .. v83[v363];
																						end
																						v83[v85[2 + 0]] = v180;
																						break;
																					end
																				end
																				break;
																			end
																			if ((v177 == (0 - 0)) or ((887 - (50 + 652)) >= 2652)) then
																				v178 = 0 - 0;
																				v179 = nil;
																				v177 = 1;
																			end
																		end
																	else
																		v83[v85[6 - 4]] = v85[3] ^ v83[v85[3 + 1]];
																	end
																elseif (((7988 - 3483) > (5225 - (1081 + 673))) and (v86 <= ((947 - (40 + 720)) - 144))) then
																	local v182 = 0 - 0;
																	local v183;
																	local v184;
																	local v185;
																	while true do
																		if ((2860 == (7185 - 4325)) and (v182 == 1)) then
																			v185 = nil;
																			while true do
																				if ((2911 == (2645 + 266)) and (v183 == 1)) then
																					for v364 = 1 - (323 - (142 + 181)), #v82 do
																						local v365 = 0 + 0;
																						local v366;
																						local v367;
																						while true do
																							if (((10244 - 5443) > 2020) and (v365 == (1 + 0))) then
																								while true do
																									if ((345 == (2192 - (857 + 990))) and (v366 == 0)) then
																										v367 = v82[v364];
																										for v441 = 1391 - (915 + 476), #v367 do
																											local v442 = 0;
																											local v443;
																											local v444;
																											local v445;
																											local v446;
																											while true do
																												if (((0 - 0) == v442) or ((56 + 11 + 43) == (3148 - (661 + 422)))) then
																													v443 = 0 - 0;
																													v444 = nil;
																													v442 = 1;
																												end
																												if ((v442 == ((8 - 6) + 0)) or ((3446 - (5484 - 3944)) == (94 + 2016))) then
																													while true do
																														if (((2793 - (971 + 197)) >= (216 + 445)) and (v443 == (528 - (394 + 134)))) then
																															v444 = v367[v441];
																															v445 = v444[908 - ((737 - (28 + 446)) + 644)];
																															v443 = 1;
																														end
																														if ((v443 == (1 + 0)) or (((1686 - (1043 + 604)) + 1299) <= (294 + 203))) then
																															v446 = v444[3 - 1];
																															if (((v445 == v83) and (v446 >= v184)) or ((251 + 194) >= (13344 - (21739 - 13120)))) then
																																local v467 = 0 + 0;
																																local v468;
																																while true do
																																	if ((v467 == (1443 - (784 + 659))) or (441 > (2377 - (1101 + 109)))) then
																																		v468 = 0 - 0;
																																		while true do
																																			if (((58 + 53) <= (2976 - ((2446 - (344 + 1375)) + 945))) and ((0 + 0) == v468)) then
																																				v185[v446] = v445[v446];
																																				v444[1] = v185;
																																				break;
																																			end
																																		end
																																		break;
																																	end
																																end
																															end
																															break;
																														end
																													end
																													break;
																												end
																												if ((v442 == ((1907 - (527 + 1378)) - 1)) or ((629 + 1249) >= (9550 - 6579))) then
																													v445 = nil;
																													v446 = nil;
																													v442 = 2;
																												end
																											end
																										end
																										break;
																									end
																								end
																								break;
																							end
																							if (((1105 + 483) <= 2084) and (v365 == 0)) then
																								v366 = 1508 - (684 + (1309 - (97 + 388)));
																								v367 = nil;
																								v365 = 1;
																							end
																						end
																					end
																					break;
																				end
																				if ((v183 == 0) or ((4429 + 338) == (4074 - 1499))) then
																					local v327 = 0 + 0 + 0;
																					while true do
																						if ((v327 == ((3157 - 1893) - (750 + 513))) or ((2428 - (69 + 551)) == (11095 - 6609))) then
																							v183 = 871 - (596 + 274);
																							break;
																						end
																						if ((((0 - 0) - 0) == v327) or ((9224 - 6917) == (10069 - 7210))) then
																							v184 = v85[7 - 5];
																							v185 = {};
																							v327 = 1;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if (((0 - 0) == v182) or ((768 + 2829) <= 1159)) then
																			local v287 = 1742 - (475 + (1911 - 644));
																			while true do
																				if (((0 - (955 - (622 + 333))) == v287) or ((2162 - (443 + 1544)) == (1042 + 2766))) then
																					v183 = 0;
																					v184 = nil;
																					v287 = 2 - 1;
																				end
																				if ((v287 == 1) or ((495 + 893) >= (297 + 3491))) then
																					v182 = 2 - (1 + 0);
																					break;
																				end
																			end
																		end
																	end
																elseif ((2902 <= (4798 - (1019 + 632))) and (v86 > (1615 - (1052 + 519)))) then
																	v83[v85[2]] = v83[v85[8 - 5]] % v85[1 + 0 + 3];
																elseif ((v83[v85[515 - (446 + 67)]] == v85[11 - 7]) or ((619 + 1068) >= (108 + (11700 - 7078)))) then
																	v68 = v68 + 1;
																else
																	v68 = v85[3];
																end
															elseif (((1245 + 2433) > (464 - (12 + 229))) and (v86 <= (105 - (7 + 49)))) then
																if ((v86 <= (665 - (455 + (459 - 296)))) or (((5280 - 3653) - (276 + 186)) >= (5828 - (244 + 982)))) then
																	if (((2077 + 1399) == (1877 + 1599)) and (v86 == (64 - 18))) then
																		if (((1662 + 2750) >= 2550) and (v83[v85[2 + 0]] ~= v83[v85[1 + 3]])) then
																			v68 = v68 + (1962 - (1835 + 126));
																		else
																			v68 = v85[8 - 5];
																		end
																	else
																		v68 = v85[8 - 5];
																	end
																elseif ((v86 == (57 - 9)) or (4822 == 3139)) then
																	v83[v85[2]] = v55[v85[418 - (182 + 233)]];
																else
																	local v189 = 0;
																	local v190;
																	local v191;
																	local v192;
																	local v193;
																	local v194;
																	while true do
																		if ((v189 == (0 + 0)) or ((3012 - 2086) >= (8764 - 4555))) then
																			v190 = 0 - 0;
																			v191 = nil;
																			v189 = 4 - 3;
																		end
																		if ((v189 == (183 - ((377 - 223) + 28))) or ((482 - (162 + 22)) > 3119)) then
																			v192 = nil;
																			v193 = nil;
																			v189 = 3 - 1;
																		end
																		if ((v189 == 2) or ((4339 - (1504 + 217)) >= (3256 + 678))) then
																			v194 = nil;
																			while true do
																				if ((v190 == (5 - 3)) or (4405 == (1367 - 787))) then
																					for v368 = v191, v69 do
																						local v369 = 0;
																						local v370;
																						while true do
																							if ((2052 <= (38 + 659 + 2885)) and (v369 == 0)) then
																								v370 = 0 + 0;
																								while true do
																									if ((v370 == (0 + 0)) or (1027 >= (3300 + 1352))) then
																										v194 = v194 + (332 - (137 + 194));
																										v83[v368] = v192[v194];
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																				if (((1177 + 506) < (498 + 3908)) and (v190 == (2 - 1))) then
																					v69 = (v193 + v191) - (1 + 0);
																					v194 = 0 + 0;
																					v190 = 1664 - (1093 + 569);
																				end
																				if ((v190 == (0 + 0 + 0)) or (515 > (5075 - (465 + 198)))) then
																					local v328 = 0;
																					while true do
																						if (((4250 + 384) > (1212 + 1902)) and (v328 == 1)) then
																							v190 = (472 - (416 + 55)) - 0;
																							break;
																						end
																						if ((v328 == (0 + 0)) or (3564 < (3550 - (3111 - 1602)))) then
																							v191 = v85[233 - (33 + 198)];
																							v192, v193 = v80(v83[v191](v13(v83, v191 + (2 - 1), v69)));
																							v328 = 1 + 0 + 0;
																						end
																					end
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (((6 + 130 + 3109) <= (14826 - 11045)) and (v86 <= ((65 + 80) - 94))) then
																if ((2954 >= (2322 - (391 + 1140))) and (v86 > ((966 - (15 + 2)) - (801 + 98)))) then
																	local v195 = 0;
																	local v196;
																	while true do
																		if ((v195 == ((713 + 1217) - (951 + 979))) or ((18395 - 14596) <= (40 + 138))) then
																			v196 = v85[2 - 0];
																			v83[v196] = v83[v196](v13(v83, v196 + 1, v69));
																			break;
																		end
																	end
																else
																	local v197 = 0 - 0;
																	local v198;
																	local v199;
																	local v200;
																	local v201;
																	while true do
																		if ((((7872 - 5508) - (853 + (1237 - 818))) == (806 + 286)) and (v197 == (427 - (256 + 170)))) then
																			v200 = nil;
																			v201 = nil;
																			v197 = 2;
																		end
																		if ((v197 == (0 + 0)) or ((11040 - 6899) > 4352)) then
																			v198 = 0;
																			v199 = nil;
																			v197 = 1;
																		end
																		if (((2 - 0) == v197) or (762 > 4378)) then
																			while true do
																				if (((6450 - 3763) < 3114) and (v198 == (4 - 2))) then
																					if ((v200 > (0 + 0)) or (815 > ((9535 - (1436 + 68)) - 4944))) then
																						if ((v201 <= v83[v199 + 1 + 0]) or ((2488 + 612) == 1525)) then
																							local v406 = 1679 - (18 + 7 + 1654);
																							while true do
																								if ((v406 == (0 - 0)) or ((4257 - 2424) > (795 + 1174))) then
																									v68 = v85[3];
																									v83[v199 + 1 + 2] = v201;
																									break;
																								end
																							end
																						end
																					elseif ((v201 >= v83[v199 + 1 + 0 + 0]) or ((779 + 259) >= (4343 - 1028))) then
																						local v407 = 0 - 0;
																						local v408;
																						while true do
																							if ((v407 == 0) or (4257 <= 430)) then
																								v408 = 0 + 0;
																								while true do
																									if ((v408 == ((1844 - (359 + 384)) - (577 + 524))) or ((5835 - (837 + 608)) >= (11674 - 7130))) then
																										v68 = v85[1 + 2];
																										v83[v199 + (1530 - (605 + 922))] = v201;
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																				if ((v198 == (153 - (58 + (1846 - (657 + 1095))))) or ((275 + 274 + 97) >= (9424 - 6051))) then
																					local v329 = 0 + 0;
																					while true do
																						if (((6964 - (1743 + 223)) > (939 + 352)) and (v329 == 1)) then
																							v198 = 2;
																							break;
																						end
																						if (((2117 - 1539) <= (4431 - (1337 + 380))) and (v329 == ((4003 - 2571) - (1252 + 180)))) then
																							v201 = v83[v199] + v200;
																							v83[v199] = v201;
																							v329 = 1 + 0;
																						end
																					end
																				end
																				if (((437 + 1315) <= (4161 - (547 + 331))) and (v198 == (0 - (0 + 0)))) then
																					v199 = v85[1 + 1];
																					v200 = v83[v199 + (1050 - (25 + 1023))];
																					v198 = (1 + 0) - 0;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (((882 + 650) > (284 + 775)) and (v86 <= (1095 - (522 + 521)))) then
																local v202 = 0 - 0;
																local v203;
																local v204;
																local v205;
																while true do
																	if ((v202 == ((3524 - 2424) - (197 + 902))) or (1676 > 2875)) then
																		v205 = nil;
																		while true do
																			if (((4350 - (154 + 350)) > (2951 - (157 + 918))) and (v203 == (173 - (85 + (194 - 106))))) then
																				local v332 = (3002 - 1898) - (324 + 780);
																				while true do
																					if ((v332 == (749 - (339 + 409))) or ((2945 + 1031) <= (407 + 1202))) then
																						v203 = 1;
																						break;
																					end
																					if (((3582 + 461) >= (689 - (299 + 165))) and (v332 == 0)) then
																						local v391 = 0 - 0;
																						while true do
																							if (((1077 - 630) <= (4605 - (438 + 421))) and (v391 == (0 + (980 - (661 + 319))))) then
																								v204 = v85[1333 - (1226 + 105)];
																								v205 = v83[v204];
																								v391 = 1;
																							end
																							if ((v391 == 1) or ((2874 - 1199) <= 1413)) then
																								v332 = 2 - 1;
																								break;
																							end
																						end
																					end
																				end
																			end
																			if (((2068 - 1163) < 3983) and (v203 == (3 - 2))) then
																				for v371 = v204 + (1 - 0), v69 do
																					v7(v205, v83[v371]);
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if (((3537 - (2708 - (163 + 73))) >= (1311 - (922 + 219))) and (v202 == ((0 - 0) + 0 + 0))) then
																		v203 = 824 - ((680 - (46 + 83)) + 273);
																		v204 = nil;
																		v202 = 139 - (5 + 133);
																	end
																end
															elseif (((189 + 336) < (1386 + (2865 - 1513))) and (v86 == ((1803 - (28 + 1651)) - 71))) then
																if ((v83[v85[1651 - (775 + 874)]] <= v85[597 - (47 + 546)]) or (2387 < (4454 - (229 + 2871)))) then
																	v68 = v68 + (255 - (148 + 106));
																else
																	v68 = v85[(2024 - (585 + 407)) - (805 + 224)];
																end
															else
																v83[v85[1634 - (1394 + 238)]] = v83[v85[1438 - (1008 + 427)]][v85[1290 - (974 + 312)]];
															end
														elseif (((4215 - (1111 + 587)) < (1519 + 1780)) and (v86 <= ((147 + 1315) - (182 + 1217)))) then
															if ((((2903 - (655 + 987)) + 13) == (1079 + 195)) and (v86 <= (76 - 18))) then
																if ((v86 <= (52 + 4)) or ((2377 + 1466) <= (2961 - (394 + 437)))) then
																	if (((983 + 1368) < (1100 + 2624)) and (v86 > (586 - (248 + 283)))) then
																		v83[v85[2 + 0]] = v56[v85[1756 - (1313 + 440)]];
																	else
																		v83[v85[2 + 0]] = v83[v85[7 - (1857 - (1809 + 44))]] - v85[1752 - (904 + 844)];
																	end
																elseif ((v86 == (109 - 52)) or ((20689 - 16008) > (8339 - 3461))) then
																	v56[v85[1161 - (995 + 163)]] = v83[v85[2 + 0]];
																else
																	local v211 = 0;
																	local v212;
																	local v213;
																	local v214;
																	while true do
																		if ((v211 == (873 - (366 + 506))) or ((2430 + (9562 - 7484)) <= 4050)) then
																			v214 = nil;
																			while true do
																				if (((2 - 1) == v212) or ((1676 - (161 + 31 + 202)) <= (240 - (23 + 34 + 134)))) then
																					while true do
																						if (((650 + 2304) == (2368 + 586)) and (v213 == (1490 - (1442 + 48)))) then
																							v214 = v85[1 + 1];
																							do
																								return v13(v83, v214, v214 + v85[3]);
																							end
																							break;
																						end
																					end
																					break;
																				end
																				if (((3172 - (187 + 1320)) > (1690 - 1045)) and (v212 == (619 - (350 + 124 + 145)))) then
																					v213 = 664 - (579 + (121 - 36));
																					v214 = nil;
																					v212 = 1041 - (53 + 987);
																				end
																			end
																			break;
																		end
																		if ((v211 == 0) or (2059 < (1069 + 1))) then
																			v212 = 0 - (0 + 0);
																			v213 = nil;
																			v211 = 1 - (0 - 0);
																		end
																	end
																end
															elseif ((v86 <= (1633 - (763 + 810))) or (2652 <= (1064 - 691))) then
																if (((4788 - (52 + 779)) == (3536 + 421)) and (v86 > (39 + 19 + 1))) then
																	v83[v85[(38 - (13 + 19)) - 4]] = {};
																else
																	v83[v85[882 - (856 + 24)]] = v83[v85[3 + 0]] / v83[v85[9 - 5]];
																end
															elseif ((3317 == (4096 - (469 + 310))) and (v86 <= 61)) then
																v83[v85[4 - (76 - (61 + 13))]] = v83[v85[6 - 3]][v83[v85[349 - (182 + 163)]]];
															elseif ((v86 > (166 - 104)) or ((9 + 126 + 16) >= (6601 - 3291))) then
																v83[v85[2 + 0]] = v83[v85[1054 - (711 + 340)]] - v83[v85[4 + 0]];
															else
																v83[v85[(1194 - (1141 + 48)) - 3]] = v83[v85[8 - 5]];
															end
														elseif ((v86 <= 68) or ((2517 + 172) >= (3994 - (1131 + 78)))) then
															if (((2414 - (9 + 32)) < 2683) and (v86 <= (1716 - (503 + 1148)))) then
																if ((v86 == (5 + 59)) or ((3438 - (330 + 1597)) > (2506 - (326 + 366)))) then
																	if ((v83[v85[2]] <= v83[v85[4]]) or ((6347 - (287 + 1063)) <= (4972 - (4813 - (606 + 522))))) then
																		v68 = v68 + (865 - (526 + 77 + 261));
																	else
																		v68 = v85[6 - 3];
																	end
																else
																	local v219 = 0 - 0;
																	local v220;
																	while true do
																		if ((v219 == ((0 + 0) - 0)) or ((3211 - (941 + 439)) <= 1732)) then
																			v220 = v83[v85[4 + 0]];
																			if (not v220 or ((3189 - (9719 - 7760)) > (1609 + 280))) then
																				v68 = v68 + (1620 - (889 + 730));
																			else
																				local v299 = 0;
																				local v300;
																				local v301;
																				while true do
																					if (((2790 + 223) == 3013) and (v299 == (0 - 0))) then
																						v300 = 0 + 0;
																						v301 = nil;
																						v299 = 1479 - (666 + 812);
																					end
																					if ((v299 == (1 + 0)) or ((3608 - 1709) == 3025)) then
																						while true do
																							if ((3853 == ((12289 - 6820) - (377 + 1239))) and (v300 == 0)) then
																								v301 = (0 - 0) + 0;
																								while true do
																									if ((v301 == (0 - 0)) or (1321 == (6256 - (754 + 1043)))) then
																										v83[v85[1 + 1]] = v220;
																										v68 = v85[2 + 1];
																										break;
																									end
																								end
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																	end
																end
															elseif ((v86 <= 66) or (1981 > ((14404 - (516 + 1350)) - (31062 - 23206)))) then
																if (((3305 - (308 + 590)) >= (3728 - 1338)) and v83[v85[5 - 3]]) then
																	v68 = v68 + (1264 - (895 + 321 + 47));
																else
																	v68 = v85[5 - 2];
																end
															elseif ((v86 > 67) or ((5700 - (293 + 1174)) == (1216 + 1966))) then
																local v265 = 351 - (349 + 2);
																local v266;
																local v267;
																local v268;
																while true do
																	if (((6067 - 3907) < (1407 + 1008)) and (v265 == 1)) then
																		v268 = {};
																		v267 = v10({}, {__index=function(v333, v334)
																			local v335 = 0;
																			local v336;
																			while true do
																				if ((v335 == (0 - 0)) or ((2766 - 751) > (5154 - 1987))) then
																					v336 = v268[v334];
																					return v336[2 - 1][v336[1 + 1]];
																				end
																			end
																		end,__newindex=function(v337, v338, v339)
																			local v340 = (1008 - (151 + 857)) - 0;
																			local v341;
																			local v342;
																			while true do
																				if (((89 - 22) <= 3784) and (v340 == ((210 - (169 + 40)) + (1925 - (390 + 1535))))) then
																					while true do
																						if ((v341 == 0) or ((7878 - (753 + 4905)) == (1850 + 1425))) then
																							v342 = v268[v338];
																							v342[1 + 0][v342[1138 - (963 + 173)]] = v339;
																							break;
																						end
																					end
																					break;
																				end
																				if (((3770 - (480 + 1404)) > 1154) and (v340 == ((0 - 0) - 0))) then
																					v341 = 1553 - (280 + 1273);
																					v342 = nil;
																					v340 = 1 - (0 - 0);
																				end
																			end
																		end});
																		v265 = 1126 - (409 + 715);
																	end
																	if (((3305 - (172 + 1570)) >= (2178 - (155 + 723))) and (v265 == (6 - 4))) then
																		for v343 = 1 - 0, v85[4] do
																			local v344 = 0 - 0;
																			local v345;
																			while true do
																				if ((v344 == (2 - 1)) or ((983 + 2141) >= (1965 + 2284))) then
																					if ((v345[1] == (184 - 122)) or ((204 - 59) >= (1868 + 1973))) then
																						v268[v343 - (1 + 0 + 0)] = {v83,v345[3]};
																					else
																						v268[v343 - ((598 - (56 + 541)) - 0)] = {v55,v345[80 - (74 + 3)]};
																					end
																					v82[#v82 + (901 - (584 + 316))] = v268;
																					break;
																				end
																				if (((3053 + 147) >= (2046 - (2493 - 1685))) and (v344 == (0 - 0))) then
																					local v395 = 1434 - (1026 + 408);
																					while true do
																						if (((2178 + 452) == (196 + 2434)) and ((0 - 0) == v395)) then
																							v68 = v68 + (1547 - ((1055 - (448 + 454)) + 1393));
																							v345 = v77[v68];
																							v395 = 1;
																						end
																						if ((3225 > 2591) and (1 == v395)) then
																							v344 = 1766 - (327 + 1438);
																							break;
																						end
																					end
																				end
																			end
																		end
																		v83[v85[(648 - 437) - (133 + (295 - (192 + 27)))]] = v30(v266, v267, v56);
																		break;
																	end
																	if ((v265 == (1826 - ((556 - 186) + 539 + 917))) or (2614 < (45 - 19))) then
																		v266 = v78[v85[2 + 1]];
																		v267 = nil;
																		v265 = 2 - 1;
																	end
																end
															else
																v55[v85[311 - (149 + 49 + 110)]] = v83[v85[2 + 0]];
															end
														elseif ((((1571 - 544) + 978) > (2971 - (1587 + 385))) and (v86 <= (1326 - (486 + 720 + 50)))) then
															if ((v86 > (50 + 19)) or ((2307 - (112 + 1686)) >= (1487 + 1481))) then
																if ((v85[2] <= v85[1119 - (777 + 338)]) or ((4864 - (319 + 193)) == (13249 - 10442))) then
																	v68 = v68 + ((1620 - 591) - (578 + 450));
																else
																	v68 = v85[1 + 2];
																end
															else
																local v221 = 0;
																local v222;
																while true do
																	if ((v221 == (0 - 0)) or ((3269 - (156 + 7)) < (315 + 2464))) then
																		v222 = 0 - 0;
																		while true do
																			if (((5990 - (175 + (2995 - 1976))) >= (3343 + 640)) and (v222 == (0 - 0))) then
																				v83[v85[3 - 1]] = v85[3] ~= (236 - (93 + 143));
																				v68 = v68 + 1;
																				break;
																			end
																		end
																		break;
																	end
																end
															end
														elseif (((306 + 2558) > (449 + 166)) and (v86 <= (125 - (40 + 14)))) then
															v83[v85[1590 - (1497 + 91)]] = v83[v85[1 + 2]] * v85[9 - 5];
														elseif ((v86 > 72) or ((8371 - 6504) > (12605 - 8678))) then
															local v272 = 1627 - (927 + 700);
															local v273;
															while true do
																if ((v272 == (0 + 0)) or ((375 + 2733 + 41) <= 2170)) then
																	v273 = v85[301 - (248 + 51)];
																	v83[v273](v13(v83, v273 + (2 - 1), v69));
																	break;
																end
															end
														else
															v83[v85[5 - (8 - 5)]] = v85[(378 + 447) - ((653 - (409 + 185)) + 763)] / v85[1 + 3];
														end
														v68 = v68 + (1 - 0);
														break;
													end
												end
												break;
											end
										end
										break;
									end
								end
							end
						end
						A, B = v28(v11(v72));
						if not A[1] then
							local v94 = v54[4][v68] or "?";
							error("Script error at [" .. v94 .. "]:" .. A[2]);
						else
							return v13(A, 2, B);
						end
					end;
				end
				return v30(v29(), {}, v17)(...);
			end
			if (v18 == 2) then
				function v23()
					local v60, v61 = v1(v16, v19, v19 + (1109 - (838 + 269)));
					v19 = v19 + (816 - (197 + 617));
					return (v61 * (981 - 725)) + v60;
				end
				v24 = nil;
				function v24()
					local v62, v63, v64, v65 = v1(v16, v19, v19 + 2 + 1);
					v19 = v19 + (1005 - (670 + 331));
					return (v65 * (16778539 - ((540 - 196) + 979))) + (v64 * (31023 + (36252 - (1720 + 19)))) + (v63 * (126 + 130)) + v62;
				end
				v25 = nil;
				v18 = 3;
			end
		end
	end
	vv9(), ...);
end
